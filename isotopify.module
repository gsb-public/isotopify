<?php

/**
 * Implements hook_ctools_plugin_directory().
 */
function isotopify_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools') {
    return "plugins/$plugin_type";
  }
}

function isotopify_theme($existing, $type , $theme, $path) {

  return array(
    'isotopify_wrapper' => array(
      'template' => 'templates/isotopify-wrapper',
      'file' => 'theme.inc',
    ),
    'isotopify_item' => array(
      'template' => 'templates/isotopify-item',
      'file' => 'theme.inc',
    ),
    'isotopify_checkboxes' => array(
      'template' => 'templates/filters/isotopify-checkboxes',
      'file' => 'theme.inc',
    ),
    'isotopify_search' => array(
      'template' => 'templates/filters/isotopify-search',
      'file' => 'theme.inc',
    ),
  );
}

function isotopify_libraries_info() {

  $libraries['isotope'] = array(
    'name' => 'isotope',
    'vendor url' => 'http://isotope.metafizzy.co',
    'download url' => 'http://isotope.metafizzy.co',
    'version arguments' => array(
      'file' => 'isotope.pkgd.js',
      'pattern' => '@^/\*! Isotope PACKAGED v([\d\.]+) @',
      'lines' => 2,
    ),
    'files' => array(
      'js' => array(
        'isotope.pkgd.js',
      ),
    ),
    'integration files' => array(
      'isotope' => array(
        'js' => array(
          'isotope.pkgd.js',
        ),
      ),
    ),
  );

  $libraries['jquery-date-range-picker'] = array(
    'name' => 'jquery-date-range-picker',
    'vendor url' => 'https://github.com/longbill/jquery-date-range-picker',
    'download url' => 'https://github.com/longbill/jquery-date-range-picker',
    'version arguments' => array(
      'file' => 'isotope.pkgd.js',
      'pattern' => '@^/\*! version : ([\d\.]+) @',
      'lines' => 2,
    ),
    'files' => array(
      'js' => array(
        'jquery.daterangepicker.js',
      ),
      'css' => array(
        'daterangepicker.css',
      )
    ),
    'integration files' => array(
      'isotope' => array(
        'js' => array(
          'jquery.daterangepicker.js',
        ),
        'css' => array(
          'daterangepicker.css',
        )
      ),
    ),
    'dependencies' => array(
      'moment',
    ),
  );

  return $libraries;
}

function isotopify_prepare($items, $options) {
  drupal_add_js(libraries_get_path('isotope') . '/isotope.pkgd.js');

  if (!empty($options['settings']['lazyLoad'])) {
    drupal_add_js(libraries_get_path('jquery_lazyload') . '/jquery.lazyload.min.js');
  }

  $unique_id = drupal_html_id('isotopify');
  drupal_add_js(array('isotopify' => array($unique_id => $options['settings'])), 'setting');
  drupal_add_js(drupal_get_path('module', 'isotopify') . '/js/isotopify.js');
  drupal_add_css(drupal_get_path('module', 'isotopify') . '/css/isotopify.css');

  $cards = '';
  foreach ($items as $item) {;
    $classes = array();
    if (!empty($item['classes'])) {
      $classes += $item['classes'];
    }
    $daterange = '';
    if (!empty($item['filters'])) {
      if (!empty($item['filters']['daterange'])) {
        $daterange = $item['filters']['daterange'];
        unset($item['filters']['daterange']);
      }

      foreach ($item['filters'] as $key => $values) {
        foreach ($values as $value) {
          $classes[] = drupal_html_class('filter--' . $key . '--' . $value);
        }
      }
    }

    $variables = array(
      'class' => implode(' ', $classes),
      'item-id' => $item['item-id'],
      'view_id' => $options['id'],
      'data' => $item['data'],
      'filters' => array(),
      'sort' => array(),
    );
    if (!empty($daterange)) {
      $variables['daterange'] = $daterange[0];
    }
    if (!empty($item['filters'])) {
      $variables['filters'] = $item['filters'];
    }

    if (!empty($item['sort'])) {
      $variables['sort'] = $item['sort'];
    }

    $cards .= theme('isotopify_item', $variables);
  }

  $parameters = array(
    'title' => (!empty($options['settings']['title'])) ? $options['settings']['title'] : '',
    'isotope_data' => $cards,
    'unique_id' => $unique_id,
    'view_id' => $options['id'],
    'callback' => $options['settings']['callback'],
    'header' => (!empty($options['settings']['header'])) ? $options['settings']['header'] : '',
    'footer' => (!empty($options['settings']['footer'])) ? $options['settings']['footer'] : '',
    'no_results' => (!empty($options['settings']['no_results'])) ? $options['settings']['no_results'] : '',
  );


  if (!empty($options['filters'])) {
    $form_state = array('method' => 'get', 'filters' => $options['filters'], 'redirect' => FALSE);
    $form = drupal_build_form('isotopify_filters', $form_state);
    unset($form['form_build_id']);
    $parameters['filters'] = drupal_render($form);
  }

  $output = theme('isotopify_wrapper', $parameters);
  return $output;
}

function isotopify_forms($form_id, $args) {
  $forms['isotopify_filters'] = array(
    'callback' => 'isotopify_filters_form',
    'callback arguments' => $args,
  );

  return $forms;
}

function isotopify_filters_form($form, &$form_state) {
  $form['filters'] = array(
    '#type' => 'container',
  );

  $form['isotopify-title-sort'] = array(
    '#type' => 'container',
  );

  foreach ($form_state['filters'] as $id => $filter) {
    switch ($filter['type']) {
      case 'checkboxes':
        $classes = array('isotopify-filter-checkboxes');
        if (!empty($filter['multiple'])) {
          $classes[] = 'isotopify-multiple';
        }
        if (!empty($filter['default']) && !is_array($filter['default'])) {
          $filter['default'] = array();
        }

        // Add default values from the url.
        $url_id = str_replace('_', '-', $id);
        if (!empty($_GET[$url_id])) {
          $urlDefaults = explode(',', $_GET[$url_id]);
          $urlDefaults = array_map('trim', $urlDefaults);
          if (empty($filter_default)) {
            $filter['default'] = $urlDefaults;
          }
          else {
            $filter['default'] = array_merge($filter['default'], $urlDefaults);
          }
        }

        $filter_default = '';
        if (!empty($filter['default'])) {
          $filter_default = $filter['default'];
        }

        $form['filters']['filter_' . $id] = array(
          '#type' => 'select',
          '#title' => $filter['title'],
          '#options' => $filter['options'],
          '#attributes' => array(
            'class' => $classes,
            'data-isotopify-id' => drupal_html_class($id),
          ),
          '#multiple' => true,
          '#default_value' => !empty($form_state['values']['filter_' . $id]) ? $form_state['values']['filter_' . $id] : $filter_default,
        );

        drupal_add_js(drupal_get_path('module', 'isotopify') . '/js/jquery.multiple.select.js');
        drupal_add_css(drupal_get_path('module', 'isotopify') . '/css/multiple-select.css');
        break;
      case 'search':
        $form['filters']['search']['search'] = array(
          '#type' => 'textfield',
          '#default_value' => !empty($form_state['values']['search']) ? $form_state['values']['search'] : '',
          '#size' => 60,
          '#maxlength' => 128,
        );

        if (!empty($filter['title'])) {
          $form['filters']['search']['search']['#title'] = $filter['title'];
        }

        if (!empty($filter['placeholder'])) {
          $form['filters']['search']['search']['#attributes']['placeholder'] = $form_state['filters']['search']['placeholder'];
        }
        break;
      case 'submit':
        // Submit Button
        $form['submit'] = array(
          '#type' => 'submit',
          '#value' => $filter['title'],
        );
        break;
      case 'date range':
        $title = !empty($filter['title']) ? $filter['title'] : 'Select Date Range';
        // Add default values from the url.
        $url_id = str_replace('_', '-', $id);
        $default_from = '';
        $default_to = '';
        if (!empty($_GET[$url_id . '-from']) && !empty($_GET[$url_id . '-to'])) {
          $default_from = trim($_GET[$url_id . '-from']);
          $default_to = trim($_GET[$url_id . '-to']);
        }
        $form['filters']['date_range'] = array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('isotopify-filter-daterange'),
            'data-title' => $title,
          ),
          'date_range_from' => array(
            '#type' => 'textfield',
            '#title' => $filter['date_from_title'],
            '#default_value' => $default_from,
            '#attributes' => array(
              'class' => array('date-range-field'),
            ),
          ),
          'date_range_to' => array(
            '#type' => 'textfield',
            '#title' => $filter['date_to_title'],
            '#default_value' => $default_to,
            '#attributes' => array(
              'class' => array('date-range-field'),
            ),
          ),
        );

        drupal_add_js(libraries_get_path('moment') . '/moment.js');
        drupal_add_js(libraries_get_path('jquery-date-range-picker') . '/src/jquery.daterangepicker.js');
        drupal_add_css(libraries_get_path('jquery-date-range-picker') . '/src/daterangepicker.css');
        break;
      case 'sort':
        $sort_default = !empty($filter['default']) ? $filter['default'] : array_pop($filter['options']);
        $options = array();
        $attributes = array();
        foreach ($filter['options'] as $key => $settings) {
          $options[$key] = $settings['name'];
          if (!empty($settings['additional_sort'])) {
            $attributes['data-isotopify-additional-sort-' . $key] = drupal_json_encode($settings['additional_sort']);
          }
        }
        $form['isotopify-sort']['sort'] = array(
          '#type' => 'select',
          '#title' => $filter['title'],
          '#options' => $options,
          '#required' => TRUE,
          '#attributes' => array(
            'class' => array('isotopify-filter-sort'),
            'data-isotopify-id' => drupal_html_class($id),
          ),
          '#default_value' => !empty($form_state['values']['sort']) ? $form_state['values']['sort'] : $sort_default,
        );

        $form['isotopify-sort']['sort']['#attributes'] = array_merge($form['isotopify-sort']['sort']['#attributes'], $attributes);
        break;
    }
  }

  return $form;
}
